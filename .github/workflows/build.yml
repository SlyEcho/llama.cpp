name: CI

on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  push:
    branches:
      - master
    paths: ['.github/workflows/**', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.c', '**/*.cpp']
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.c', '**/*.cpp']

env:
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  #ubuntu-focal-make:
  #  runs-on: ubuntu-20.04
#
  #  steps:
  #    - name: Clone
  #      id: checkout
  #      uses: actions/checkout@v1
#
  #    - name: Dependencies
  #      id: depends
  #      run: |
  #        sudo apt-get update
  #        sudo apt-get install build-essential gcc-8
#
  #    - name: Build
  #      id: make_build
  #      run: |
  #        CC=gcc-8 make

  #ubuntu-latest-cmake:
  #  runs-on: ubuntu-latest
#
  #  steps:
  #    - name: Clone
  #      id: checkout
  #      uses: actions/checkout@v1
#
  #    - name: Dependencies
  #      id: depends
  #      run: |
  #        sudo apt-get update
  #        sudo apt-get install build-essential
#
  #    - name: Build
  #      id: cmake_build
  #      run: |
  #        mkdir build
  #        cd build
  #        cmake ..
  #        cmake --build . --config Release
#
  #    - name: Test
  #      id: cmake_test
  #      run: |
  #        cd build
  #        ctest --verbose

  #ubuntu-latest-cmake-sanitizer:
  #  runs-on: ubuntu-latest
#
  #  continue-on-error: true
#
  #  strategy:
  #    matrix:
  #      sanitizer: [ADDRESS, THREAD, UNDEFINED]
  #      build_type: [Debug, Release]
#
  #  steps:
  #    - name: Clone
  #      id: checkout
  #      uses: actions/checkout@v1
#
  #    - name: Dependencies
  #      id: depends
  #      run: |
  #        sudo apt-get update
  #        sudo apt-get install build-essential
#
  #    - name: Build
  #      id: cmake_build
  #      run: |
  #        mkdir build
  #        cd build
  #        cmake .. -DLLAMA_SANITIZE_${{ matrix.sanitizer }}=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
  #        cmake --build . --config ${{ matrix.build_type }}
#
  #    - name: Test
  #      id: cmake_test
  #      run: |
  #        cd build
  #        ctest --verbose

  #macOS-latest-make:
  #  runs-on: macos-latest
#
  #  steps:
  #    - name: Clone
  #      id: checkout
  #      uses: actions/checkout@v1
#
  #    - name: Dependencies
  #      id: depends
  #      run: |
  #        brew update
#
  #    - name: Build
  #      id: make_build
  #      run: |
  #        make

  #macOS-latest-cmake:
  #  runs-on: macos-latest
#
  #  steps:
  #    - name: Clone
  #      id: checkout
  #      uses: actions/checkout@v1
#
  #    - name: Dependencies
  #      id: depends
  #      run: |
  #        brew update
#
  #    - name: Build
  #      id: cmake_build
  #      run: |
  #        mkdir build
  #        cd build
  #        cmake -DLLAMA_AVX2=OFF ..
  #        cmake --build . --config Release
#
  #    - name: Test
  #      id: cmake_test
  #      run: |
  #        cd build
  #        ctest --verbose

  windows-mingw:
    runs-on: ubuntu-22.04
    env:
      OPENBLAS_VERSION: 0.3.23

    strategy:
      matrix:
        include:
          - build: 'avx'
            defines: '-DLLAMA_AVX=ON -DLLAMA_AVX2=OFF -DLLAMA_OPENBLAS=ON'
            openblas: '-DTARGET=SANDYBRIDGE'
          - build: 'avx2'
            defines: '-DLLAMA_AVX=ON -DLLAMA_AVX2=ON -DLLAMA_OPENBLAS=ON'
            openblas: '-DTARGET=HASWELL'
          - build: 'avx512'
            defines: '-DLLAMA_AVX512=ON -DBUILD_SHARED_LIBS=ON -DLLAMA_OPENBLAS=ON -DCMAKE_C_FLAGS=-march=skylake-avx512'
            openblas: '-DTARGET=SKYLAKEX -DCMAKE_C_FLAGS=-march=skylake-avx512'
          #- build: 'opencl'
          #  defines: '-DLLAMA_CLBLAST=ON -DCMAKE_PREFIX_PATH="$env:RUNNER_TEMP/clblast"'
          #  openblas: ''

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v1

      - name: Install packages
        run: |
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 cmake build-essential curl zip

      - name: Create toolchain
        run: |
          tee ~/toolchain.cmake <<EOF
          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_SYSTEM_PROCESSOR x86_64)
          set(CMAKE_C_COMPILER   /usr/bin/x86_64-w64-mingw32-gcc-posix)
          set(CMAKE_CXX_COMPILER /usr/bin/x86_64-w64-mingw32-g++-posix)
          set(CMAKE_FIND_ROOT_PATH  /usr/x86_64-w64-mingw32)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF

      #- name: Download OpenCL SDK
      #  id: get_opencl
      #  if: ${{ matrix.build == 'opencl' }}
      #  run: |
      #    curl.exe -o $env:RUNNER_TEMP/opencl.zip -L https://github.com/KhronosGroup/OpenCL-SDK/releases/download/v2023.04.17/OpenCL-SDK-v2023.04.17-Win-x64.zip
      #    mkdir $env:RUNNER_TEMP/opencl
      #    tar.exe -xvf $env:RUNNER_TEMP/opencl.zip --strip-components=1 -C $env:RUNNER_TEMP/opencl

      #- name: Download CLBlast
      #  id: get_clblast
      #  if: ${{ matrix.build == 'opencl' }}
      #  run: |
      #    curl.exe -o $env:RUNNER_TEMP/clblast.zip -L https://github.com/CNugteren/CLBlast/releases/download/1.5.3/CLBlast-1.5.3-Windows-x64.zip
      #    curl.exe -o $env:RUNNER_TEMP/CLBlast.LICENSE.txt -L https://github.com/CNugteren/CLBlast/raw/1.5.3/LICENSE
      #    mkdir $env:RUNNER_TEMP/clblast
      #    tar.exe -xvf $env:RUNNER_TEMP/clblast.zip -C $env:RUNNER_TEMP/clblast
      #    foreach ($f in (gci -Recurse -Path "$env:RUNNER_TEMP/clblast" -Filter '*.cmake')) {
      #      $txt = Get-Content -Path $f -Raw
      #      $txt.Replace('C:/dependencies/opencl/', "$($env:RUNNER_TEMP.Replace('\','/'))/opencl/") | Set-Content -Path $f -Encoding UTF8
      #    }

      - name: Cache OpenBLAS
        id: cache-openblas
        if: ${{ matrix.build != 'opencl' }}
        uses: actions/cache@v3
        with:
          path: ~/openblas
          key: OpenBLAS ${{ env.OPENBLAS_VERSION }} ${{ matrix.openblas }}

      - name: Download and build OpenBLAS
        id: get_openblas
        if: ${{ matrix.build != 'opencl' && steps.cache-openblas.outputs.cache-hit != 'true' }}
        run: |
          echo "::group::Downloading OpenBLAS ${OPENBLAS_VERSION}"
          mkdir -vp ~/src/openblas
          curl -o ~/src/openblas.tar.gz -L https://github.com/xianyi/OpenBLAS/releases/download/v${OPENBLAS_VERSION}/OpenBLAS-${OPENBLAS_VERSION}.tar.gz
          echo "::endgroup::"

          echo "::group::Extracting OpenBLAS ${OPENBLAS_VERSION}"
          tar -xvf ~/src/openblas.tar.gz --strip-components=1 -C ~/src/openblas
          echo "::endgroup::"

          echo "::group::Configuring OpenBLAS ${OPENBLAS_VERSION}"
          cmake -B ~/src/openblas/build -S ~/src/openblas \
            -DCMAKE_TOOLCHAIN_FILE="$HOME/toolchain.cmake" -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SINGLE=ON -DBUILD_DOUBLE=OFF -DBUILD_COMPLEX=OFF -DBUILD_COMPLEX16=OFF -DBUILD_BFLOAT16=OFF \
            -DBUILD_RELAPACK=OFF -DBUILD_LAPACK_DEPRECATED=OFF -DBUILD_WITHOUT_LAPACK=ON -DBUILD_WITHOUT_CBLAS=OFF \
            -DBUILD_STATIC_LIBS=ON -DBUILD_TESTING=OFF -DUSE_THREAD=ON -DNUM_THREADS=64 \
            ${{ matrix.openblas }}
          echo "::endgroup::"

          echo "::group::Building OpenBLAS ${OPENBLAS_VERSION}"
          cmake --build   ~/src/openblas/build
          echo "::endgroup::"

          echo "::group::Installing OpenBLAS ${OPENBLAS_VERSION}"
          cmake --install ~/src/openblas/build --prefix ~/openblas
          cp -v ~/src/openblas/LICENSE ~/openblas/
          echo "::endgroup::"

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE="$HOME/toolchain.cmake" -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF -DLLAMA_STATIC=ON \
            -DBLAS_LIBRARIES="-L$HOME/openblas/lib" -DOPENBLAS_INC="$HOME/openblas/include/openblas" \
            ${{ matrix.defines }}
          cmake --build . --config Release
          x86_64-w64-mingw32-strip ./bin/*.exe

      #- name: Add clblast.dll
      #  id: add_clblast_dll
      #  if: ${{ matrix.build == 'opencl' }}
      #  run: |
      #    cp $env:RUNNER_TEMP/clblast/lib/clblast.dll ./build/bin/Release
      #    cp $env:RUNNER_TEMP/CLBlast.LICENSE.txt ./build/bin/Release

      - name: Add OpenBLAS license
        id: add_openblas_license
        if: ${{ matrix.build != 'opencl' }}
        run: |
          cp ~/openblas/LICENSE "./build/bin/OpenBLAS-${OPENBLAS_VERSION}.txt"

      #- name: Check AVX512F support
      #  id: check_avx512f
      #  if: ${{ matrix.build == 'avx512' }}
      #  continue-on-error: true
      #  run: |
      #    cd build
      #    $vcdir = $(vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath)
      #    $msvc = $(join-path $vcdir $('VC\Tools\MSVC\'+$(gc -raw $(join-path $vcdir 'VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt')).Trim()))
      #    $cl =  $(join-path $msvc 'bin\Hostx64\x64\cl.exe')
      #    echo 'int main(void){unsigned int a[4];__cpuid(a,7);return !(a[1]&65536);}' >> avx512f.c
      #    & $cl /O2 /GS- /kernel avx512f.c /link /nodefaultlib /entry:main
      #    .\avx512f.exe && echo "AVX512F: YES" && ( echo HAS_AVX512F=1 >> $env:GITHUB_ENV ) || echo "AVX512F: NO"

      #- name: Test
      #  id: cmake_test
      #  if: ${{ matrix.build != 'opencl' && (matrix.build != 'avx512' || env.HAS_AVX512F == '1') }} # Test AVX-512 only when possible
      #  run: |
      #    cd build
      #    ctest -C Release --verbose

      - name: Get commit hash
        id: commit
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: pr-mpt/actions-commit-hash@v2

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          cd ./build/bin
          zip ../../llama-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip *

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          path: |
            llama-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip

  release:
    if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}

    runs-on: ubuntu-latest

    needs:
      #- ubuntu-focal-make
      #- ubuntu-latest-cmake
      #- macOS-latest-make
      #- macOS-latest-cmake
      - windows-mingw

    steps:
      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v3

      - name: Get commit hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}

      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/${file}`)
                });
              }
            }

#  ubuntu-latest-gcc:
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        build: [Debug, Release]
#
#    steps:
#      - name: Clone
#        uses: actions/checkout@v1
#
#      - name: Dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install build-essential
#          sudo apt-get install cmake
#
#      - name: Configure
#        run: cmake . -DCMAKE_BUILD_TYPE=${{ matrix.build }}
#
#      - name: Build
#        run: |
#          make
#
#  ubuntu-latest-clang:
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        build: [Debug, Release]
#
#    steps:
#      - name: Clone
#        uses: actions/checkout@v1
#
#      - name: Dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install build-essential
#          sudo apt-get install cmake
#
#      - name: Configure
#        run: cmake . -DCMAKE_BUILD_TYPE=${{ matrix.build }} -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
#
#      - name: Build
#        run: |
#          make
#
#  ubuntu-latest-gcc-sanitized:
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        sanitizer: [ADDRESS, THREAD, UNDEFINED]
#
#    steps:
#      - name: Clone
#        uses: actions/checkout@v1
#
#      - name: Dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install build-essential
#          sudo apt-get install cmake
#
#      - name: Configure
#        run: cmake . -DCMAKE_BUILD_TYPE=Debug -DLLAMA_SANITIZE_${{ matrix.sanitizer }}=ON
#
#      - name: Build
#        run: |
#          make
#
#  windows:
#    runs-on: windows-latest
#
#    strategy:
#      matrix:
#        build: [Release]
#        arch: [Win32, x64]
#        include:
#          - arch: Win32
#            s2arc: x86
#          - arch: x64
#            s2arc: x64
#
#    steps:
#      - name: Clone
#        uses: actions/checkout@v1
#
#      - name: Add msbuild to PATH
#        uses: microsoft/setup-msbuild@v1
#
#      - name: Configure
#        run: >
#          cmake -S . -B ./build -A ${{ matrix.arch }}
#          -DCMAKE_BUILD_TYPE=${{ matrix.build }}
#
#      - name: Build
#        run: |
#          cd ./build
#          msbuild ALL_BUILD.vcxproj -t:build -p:configuration=${{ matrix.build }} -p:platform=${{ matrix.arch }}
#
#      - name: Upload binaries
#        uses: actions/upload-artifact@v1
#        with:
#          name: llama-bin-${{ matrix.arch }}
#          path: build/bin/${{ matrix.build }}
#
#  windows-blas:
#    runs-on: windows-latest
#
#    strategy:
#      matrix:
#        build: [Release]
#        arch: [Win32, x64]
#        blas: [ON]
#        include:
#          - arch: Win32
#            obzip: https://github.com/xianyi/OpenBLAS/releases/download/v0.3.21/OpenBLAS-0.3.21-x86.zip
#            s2arc: x86
#          - arch: x64
#            obzip: https://github.com/xianyi/OpenBLAS/releases/download/v0.3.21/OpenBLAS-0.3.21-x64.zip
#            s2arc: x64
#
#    steps:
#      - name: Clone
#        uses: actions/checkout@v1
#
#      - name: Add msbuild to PATH
#        uses: microsoft/setup-msbuild@v1
#
#      - name: Fetch OpenBLAS
#        if: matrix.blas == 'ON'
#        run: |
#          C:/msys64/usr/bin/wget.exe -qO blas.zip ${{ matrix.obzip }}
#          7z x blas.zip -oblas -y
#          copy blas/include/cblas.h .
#          copy blas/include/openblas_config.h .
#          echo "blasdir=$env:GITHUB_WORKSPACE/blas" >> $env:GITHUB_ENV
#
#      - name: Configure
#        run: >
#          cmake -S . -B ./build -A ${{ matrix.arch }}
#          -DCMAKE_BUILD_TYPE=${{ matrix.build }}
#          -DLLAMA_SUPPORT_OPENBLAS=${{ matrix.blas }}
#          -DCMAKE_LIBRARY_PATH="$env:blasdir/lib"
#
#      - name: Build
#        run: |
#          cd ./build
#          msbuild ALL_BUILD.vcxproj -t:build -p:configuration=${{ matrix.build }} -p:platform=${{ matrix.arch }}
#
#      - name: Copy libopenblas.dll
#        if: matrix.blas == 'ON'
#        run: copy "$env:blasdir/bin/libopenblas.dll" build/bin/${{ matrix.build }}
#
#      - name: Upload binaries
#        if: matrix.blas == 'ON'
#        uses: actions/upload-artifact@v1
#        with:
#          name: llama-blas-bin-${{ matrix.arch }}
#          path: build/bin/${{ matrix.build }}
#
#  emscripten:
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        build: [Release]
#
#    steps:
#      - name: Clone
#        uses: actions/checkout@v1
#
#      - name: Dependencies
#        run: |
#          wget -q https://github.com/emscripten-core/emsdk/archive/master.tar.gz
#          tar -xvf master.tar.gz
#          emsdk-master/emsdk update
#          emsdk-master/emsdk install latest
#          emsdk-master/emsdk activate latest
#
#      - name: Configure
#        run: echo "tmp"
#
#      - name: Build
#        run: |
#          pushd emsdk-master
#          source ./emsdk_env.sh
#          popd
#          emcmake cmake . -DCMAKE_BUILD_TYPE=${{ matrix.build }}
#          make
